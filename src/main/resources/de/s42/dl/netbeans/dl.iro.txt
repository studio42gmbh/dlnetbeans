#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = textdl
file_extensions []     = textdl;

__ANNOTATION \= (@[a-zA-Z_#][a-zA-Z0-9\-_#$]*)
__VARIABLES \= (\b[a-zA-Z_#][a-zA-Z0-9\-_#$]*)
__KEYWORDS \= (\b(annotation|type|extends|contains|extern|require|enum|abstract|alias|final|pragma|declare|true|false)\b)
__RESERVED_KEYWORDS \= (\b(new|copy|scope|package|module|namespace|define|undef|in|contained|and|or|not|nand|xor|volatile|atomic|union|struct|template|class|interface|implements|contract|concept|if|private|this|throw|else|import|public|protected|throws|break|return|case|static|try|catch|void|null|lambda|do|while|for|default|instanceof|assert|use|unuse|call|clone|select|when|switch|distinct)\b)

styles [] {

.comment : style {
   color                 = grey
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
   pygments_scope        = Comment
}

.keyword : style {
   color     = cyan
   ace_scope             = keyword
   textmate_scope        = keyword
   pygments_scope        = Keyword
}

.variable : style {
   color     = green
   ace_scope             = variable
   textmate_scope        = variable
}

.variable.annotation : style {
   color     = light_blue
   ace_scope             = variable.annotation
   textmate_scope        = variable.annotation
}

.numeric : style {
   color                 = gold
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.punctuation : style {
   color     = red_2
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.string : style {
   color                 = brown
   ace_scope             = string
   textmate_scope        = string
   pygments_scope        = String
}

.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
   pygments_scope        = Generic.Error
}

}


contexts [] {

// Main

main : context {

   : include "multi_line_comment" ;

   // Single line comment
   : pattern {
      regex          \= (//.*)
      styles []       = .comment;
   }

   : pattern {
      regex          \= $${__RESERVED_KEYWORDS}
      styles []       = .illegal;
   }

   : pattern {
      regex          \= $${__KEYWORDS}
      styles []       = .keyword;
   }
   
   : include "numeric" ;
   
   : inline_push {
      regex          \= (\{)
      styles []       = .punctuation;
      : pop {  
         regex       \= (\})
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   : pattern {
      regex          \= (\$|\.|;|,|:|\(|\)|\-|&|\||\?|=|!|\+|\*|<|>|/)
      styles []       = .punctuation;
   }

   : pattern {
      regex          \= $${__VARIABLES}
      styles []       = .variable;
   }

   : pattern {
      regex          \= $${__ANNOTATION}
      styles []       = .variable.annotation;
   }

   // Empty string
   : pattern {
      regex          \= (\"\")
      styles []       = .string;
   }

   // String
   : inline_push {
      regex          \= (\")
      styles []       = .string;
      default_style   = .string
      : pop {
         regex       \= ([^\\]\")
         styles []    = .string;
      }
   }
   
   // Rest is illegal
   : pattern {
      regex          \= ([^\s])
      styles []       = .illegal;
   }
}

// Numeric

numeric : context {
   : pattern {
      regex          \= ([-]?(([0][xXbB][0-9a-fA-F]*)|(\d+([\.]?\d+)?)))
      styles []       = .numeric;
   }
}

// Comment

multi_line_comment : context {
   description        = multiline
   : inline_push {
      regex          \= (/\*)
      styles []       = .comment;
      default_style   = .comment
      : pop {
         regex       \= (\*/)
         styles []    = .comment;
      }
   }
}
   
}
