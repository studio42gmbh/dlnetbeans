// <editor-fold desc="The MIT License" defaultstate="collapsed">
/*
 * The MIT License
 * 
 * Copyright 2022 Studio 42 GmbH ( https://www.s42m.de ).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
//</editor-fold>
package de.s42.dl.netbeans.editing;

import de.s42.dl.netbeans.DLDataObject;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import static de.s42.dl.netbeans.DLDataObject.DL_MIME_TYPE;
import de.s42.dl.netbeans.editing.api.DLEditor;
import de.s42.log.LogManager;
import de.s42.log.Logger;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;
import org.netbeans.api.editor.mimelookup.MimeLookup;

@MultiViewElement.Registration(
	displayName = "#LBL_DL_VISUAL",
	iconBase = "de/s42/dl/netbeans/dl-icon.png",
	mimeType = DL_MIME_TYPE,
	persistenceType = TopComponent.PERSISTENCE_NEVER,
	preferredID = "DLVisual",
	position = 2000
)
@Messages("LBL_DL_VISUAL=Edit")
public final class DLEditorPanel extends JPanel implements MultiViewElement
{

	private final static Logger log = LogManager.getLogger(DLEditorPanel.class.getName());

	private final DLDataObject dataObject;
	private final JToolBar toolbar = new JToolBar();
	private transient MultiViewElementCallback callback;

	public DLEditorPanel(Lookup lkp)
	{
		dataObject = lkp.lookup(DLDataObject.class);

		assert dataObject != null;

		initComponents();
		initEditor();
	}

	private void initEditor()
	{
		log.debug("initEditor");

		List<DLEditor> editors = new ArrayList<>(MimeLookup.getLookup(DL_MIME_TYPE).lookupAll(DLEditor.class));

		selectEditor.removeAllItems();

		// Add all editors that could edit this DL
		for (DLEditor editor : editors) {
			if (editor.canEdit(dataObject)) {
				selectEditor.addItem(editor);
			}
		}

		// If no editor found -> Disable dropdown
		if (selectEditor.getItemCount() == 0) {
			selectEditor.setEnabled(false);
		} else {
			selectEditor.setSelectedIndex(0);

			if (selectEditor.getItemCount() == 1) {
				selectEditor.setEnabled(false);
			}
		}
	}

	protected ListCellRenderer createSelectEditorRenderer()
	{
		return new DLEditorRenderer();
	}

	@Override
	public String getName()
	{
		return "DLVisualElement";
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        editorContainer = new javax.swing.JPanel();
        emptyInfo = new javax.swing.JLabel();
        selectEditor = new javax.swing.JComboBox<>();

        editorContainer.setToolTipText(org.openide.util.NbBundle.getMessage(DLEditorPanel.class, "DLEditorPanel.editorContainer.toolTipText")); // NOI18N

        emptyInfo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        emptyInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        emptyInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/s42/dl/netbeans/navigator/error.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(emptyInfo, org.openide.util.NbBundle.getMessage(DLEditorPanel.class, "DLEditorPanel.emptyInfo.text")); // NOI18N

        javax.swing.GroupLayout editorContainerLayout = new javax.swing.GroupLayout(editorContainer);
        editorContainer.setLayout(editorContainerLayout);
        editorContainerLayout.setHorizontalGroup(
            editorContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editorContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(emptyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        editorContainerLayout.setVerticalGroup(
            editorContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editorContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(emptyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addContainerGap())
        );

        selectEditor.setRenderer(createSelectEditorRenderer());
        selectEditor.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectEditorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(244, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editorContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectEditorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectEditorActionPerformed
    {//GEN-HEADEREND:event_selectEditorActionPerformed

		DLEditor editor = (DLEditor) selectEditor.getSelectedItem();

		// Make sure the given editor can edit the data object
		if (editor != null && editor.canEdit(dataObject)) {

			final JPanel editPanel = editor.getEditorPanel(dataObject);

			// Insert the new editor within the swing thread and update
			SwingUtilities.invokeLater(() -> {
				editorContainer.removeAll();
				editorContainer.setLayout(new BorderLayout());
				editorContainer.add(editPanel, BorderLayout.CENTER);
				editorContainer.revalidate();
				editorContainer.repaint();
			});
		}
    }//GEN-LAST:event_selectEditorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel editorContainer;
    private javax.swing.JLabel emptyInfo;
    private javax.swing.JComboBox<DLEditor> selectEditor;
    // End of variables declaration//GEN-END:variables
	@Override
	public JComponent getVisualRepresentation()
	{
		return this;
	}

	@Override
	public JComponent getToolbarRepresentation()
	{
		return toolbar;
	}

	@Override
	public Action[] getActions()
	{
		return new Action[0];
	}

	@Override
	public Lookup getLookup()
	{
		return dataObject.getLookup();
	}

	@Override
	public void componentOpened()
	{
	}

	@Override
	public void componentClosed()
	{
	}

	@Override
	public void componentShowing()
	{
	}

	@Override
	public void componentHidden()
	{
	}

	@Override
	public void componentActivated()
	{
	}

	@Override
	public void componentDeactivated()
	{
	}

	@Override
	public UndoRedo getUndoRedo()
	{
		return UndoRedo.NONE;
	}

	@Override
	public void setMultiViewCallback(MultiViewElementCallback callback)
	{
		this.callback = callback;
	}

	@Override
	public CloseOperationState canCloseElement()
	{
		return CloseOperationState.STATE_OK;
	}
}
